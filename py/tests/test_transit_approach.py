import pytest
from pytest import approx
import numpy as np
import cmap_trip
import os




def test_transit_approach():
	from cmap_trip.transit_approach import transit_approach
	out = transit_approach(
		dh,
		ozone=123,
		dzone=456,
		TPTYPE='HW',
		replication=10,
		approach_distances=None,
		trace=False,
		random_state=789,
	)
	np.testing.assert_array_equal( out.drivetime, [11, 11, 10,  7, 11,  8,  6,  7,  8,  7])
	np.testing.assert_array_equal( out.walktime, [ 5, 6,  6, 10,  5, 12, 14, 17, 12, 15])
	np.testing.assert_array_equal( out.cost, [115, 115, 115, 115, 115, 115, 115, 115, 115, 115])
	np.testing.assert_array_equal( out.waittime, [10, 10, 10,  0, 10,  0,  0,  0,  0,  0])
	np.testing.assert_array_equal( out.approach_mode, np.asarray([
		[2, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0],
	]))


	out = transit_approach(
		dh,
		ozone=123,
		dzone=12,
		TPTYPE='HW',
		replication=10,
		approach_distances=None,
		trace=False,
		random_state=789,
	)
	np.testing.assert_array_equal( out.drivetime, [15, 15,  5,  7,  6,  8,  6,  7,  8,  7])
	np.testing.assert_array_equal( out.walktime, [ 5,  5, 20,  9, 18, 11, 13, 17, 11, 14])
	np.testing.assert_array_equal( out.cost, [140, 140, 115, 115, 115, 115, 115, 115, 115, 115])
	np.testing.assert_array_equal( out.waittime, [9, 9, 0, 0, 0, 0, 0, 0, 0, 0])
	np.testing.assert_array_equal( out.approach_mode, np.asarray([
		[2, 1], [2, 1], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0],
	]))

	out = transit_approach(
		dh,
		ozone=1,
		dzone=12,
		TPTYPE='HW',
		replication=10,
		approach_distances=None,
		trace=False,
		random_state=789,
	)
	assert out.drivetime == approx([15, 16, 14, 17, 16, 19, 15, 17, 18, 17])
	assert out.walktime == approx([19, 20, 20,  9, 18, 11, 13, 17, 11, 14])
	assert out.cost == approx([40, 40, 40, 40, 40, 40, 40, 40, 40, 40])
	assert out.waittime == approx([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	assert out.approach_mode == approx(np.asarray([
		[2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0],
	]))


	out = transit_approach(
		dh,
		ozone=[
			844,  844,  844,  863,  955,  955,  817,  817,  844,    7,    7,
			330,  330,   33,   33,  644, 1482,  652,  652,  644,  644, 1482,
			653,  644, 2583, 2583, 2583, 2570, 2583, 2583, 2583,  202,  201,
			202,  202,  201,  202,  621, 1549, 1491, 1491,  368,  368,  368,
			368, 1008, 1008, 1008, 1008, 1083],
		dzone=[
			955,  955,  863,  864,  864,  817,  817,  791,  791,  343,  343,
			283,  283,   57,   57, 1482,  669,  669, 1627, 1627, 1482,  653,
			643,  643,  958, 2570,  958, 2580, 2580,  958,  958,  201, 1114,
			201, 1114, 1114, 1114, 1549, 1491, 1491,  621,  418,  418,  327,
			327,  364,  364,   28,   28, 2422],
		TPTYPE='HW',
		replication=10,
		approach_distances=None,
		trace=False,
		random_state=789,
	)

	np.testing.assert_array_equal(out.drivetime, np.asarray([
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  3,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[17,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 3,  0,  0,  2,  0,  2,  0,  1,  2,  0],
		[ 1,  0,  0,  1,  0,  1,  2,  0,  3,  2],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  3,  3,  0,  6,  3,  3,  4,  5],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 1,  0,  0,  1,  0,  0,  1,  1,  0,  1],
		[ 0,  0,  0,  2,  0,  0,  0,  0,  1,  1],
		[ 0,  1,  0,  1,  1,  0,  0,  1,  1,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  1,  1,  0,  0,  1,  0,  1,  0,  1],
		[ 0,  2,  0,  0,  1,  0,  1,  0,  0,  0],
		[ 0,  0,  2,  0,  1,  1,  1,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 2,  0,  3,  1,  1,  3,  0,  2,  0,  1],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
		[ 5,  5,  4,  4,  4,  6,  6,  4,  5,  5],
		[ 4,  3,  5,  5,  4,  5,  4,  5,  5,  5],
		[ 5,  6,  4,  6,  5,  6,  6,  5,  4,  6],
		[ 4,  6,  4,  5,  6,  3,  5,  6,  4,  5],
		[ 9,  9,  7,  9, 10,  9, 10, 13, 11,  9],
		[10, 10, 10, 10,  9,  7, 10, 11, 11,  8],
		[ 2,  2,  2,  2,  0,  1,  4,  2, 13,  2],
		[ 0,  1,  1,  0,  0,  2,  0,  3,  2,  3],
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
	], dtype=np.int32))
	np.testing.assert_array_equal(out.walktime, np.asarray([
		[14, 21, 15, 17, 17, 15, 13, 15, 15, 19],
		[18, 13, 15, 20, 21, 19, 13, 15, 13, 20],
		[23, 10, 33, 26, 22, 26, 25, 17, 24, 19],
		[22, 19, 17, 22, 25, 14, 16, 25, 20, 21],
		[18, 20, 12, 18, 23, 16, 20, 20, 13, 19],
		[11, 13, 16, 13, 12, 17,  8, 10, 14, 16],
		[ 8, 11,  8, 12, 10,  7, 10, 11,  8,  9],
		[19, 11, 20, 12, 12, 16,  9, 18, 21, 13],
		[22, 28, 25, 24, 22, 17, 18, 23, 23, 24],
		[11,  8,  8, 18, 19,  7, 14, 16, 13, 17],
		[23, 21, 17, 12, 17, 21, 13, 14, 15, 18],
		[13,  6, 11, 13,  9, 10,  4,  6,  4,  7],
		[ 7,  6, 14,  8,  7,  6,  6, 10,  5,  9],
		[ 7,  4,  9, 18, 10,  2, 20, 21, 15, 15],
		[ 4, 14,  7,  9, 18,  4, 17,  6, 16, 16],
		[16, 16, 13,  9, 17, 16, 15,  9, 11, 17],
		[12, 16, 16, 17, 12, 16, 10, 14, 13, 12],
		[ 7, 10, 12,  9,  7, 10, 12, 11,  9, 10],
		[ 9, 14, 15,  9, 15, 11, 12,  7, 12, 14],
		[13, 10, 14, 13, 11, 13, 17, 15, 16, 12],
		[ 7, 18, 14, 14,  8, 16, 12, 15, 16, 19],
		[19, 13, 13, 14,  9, 18, 16, 23, 21, 19],
		[13, 16,  7,  9,  6, 12, 15, 12,  4, 12],
		[23, 11, 23,  5,  8, 13, 14, 12,  9, 12],
		[12, 15,  8,  6, 11, 16, 15, 10, 11,  7],
		[ 8, 14, 10, 14, 12, 11,  6, 11, 14, 13],
		[17, 14, 17, 17, 11,  9, 18,  6, 14,  8],
		[18, 24, 13, 19, 14, 19, 17, 14, 20, 21],
		[15, 14, 10,  9,  9, 19,  6,  5, 19, 14],
		[10, 13, 15, 12, 16, 13, 15, 18, 16, 10],
		[15, 16, 12, 14, 17,  9,  8,  6, 12, 10],
		[10,  9,  8, 11,  7, 11,  9, 13, 10,  8],
		[10, 11, 10, 12, 11, 14, 13, 10, 14, 12],
		[ 7,  8, 10, 11, 11, 12,  7, 12,  8, 11],
		[10, 12, 11, 10, 11,  9, 12, 13, 12,  8],
		[13, 14, 12, 12, 12, 10, 12, 10, 12, 14],
		[ 9, 12,  9, 10,  8, 10, 11,  8, 10,  9],
		[23, 19, 20, 18,  8,  9, 19, 26, 18, 19],
		[ 7, 12,  7,  5, 10, 12, 13, 11, 10,  7],
		[13, 16, 18, 20,  9, 12, 20, 11, 16, 12],
		[14, 14, 11, 13, 16, 10, 11, 17, 15, 13],
		[ 7,  7,  7,  6,  7,  5,  8,  7,  5,  8],
		[ 8,  7,  6,  7,  5,  8,  6,  7,  5,  6],
		[14, 13, 14, 18, 11,  7, 14, 10, 20, 12],
		[11, 15, 18, 12, 12,  3, 13, 13, 16, 14],
		[ 4,  6, 10,  7,  7,  6,  4,  5,  4,  4],
		[ 6,  7,  6,  6,  8,  5,  8,  8,  4,  6],
		[ 4, 16,  3,  6,  4, 12,  3,  8,  4, 14],
		[ 3, 15, 10,  7, 18,  5,  5,  3,  9,  5],
		[23, 28, 23, 26, 25, 22, 29, 27, 27, 27],
	], dtype=np.int32))